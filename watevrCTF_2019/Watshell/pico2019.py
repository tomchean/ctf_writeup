# picoCTF 2019 - Cryptography

# The numbers
char = 'abcdefghijklmnopqrstuvwxyz'
cipher = [20, 8, 5, 14, 21, 13, 2, 5, 18, 19, 13, 1, 19, 15, 14]
flag = ''
for i in range(len(cipher)):
    flag += char[cipher[i]-1]
flag = flag.upper()
flag = 'PICOCTF{' + flag + '}'
print(flag)

# 13
## ROT13
cipher = 'cvpbPGS{abg_gbb_onq_bs_n_ceboyrz}'
flag = ''
for i in range(len(cipher)):
    idx = ord(cipher[i])
    if idx > 96 and idx < 123:
        idx += 13
        if idx > 122:
            idx -= 26
    elif idx > 64 and idx < 91:
        idx += 13
        if idx > 90:
            idx -= 26
    flag += chr(idx)
print(flag)

# Easy1
## use https://planetcalc.com/2468/
## text = 'UFJKXQZQUNB', key =  'SOLVECRYPTO'
flag = 'CRYPTOISFUN'
flag = 'picoCTF{' + flag + '}'
print(flag)

# caesar
cipher = 'odaeeuzsftqdgnuoazxvymiumq'
for key in range(26):
    flag = ''
    for i in range(len(cipher)):
        idx = ord(cipher[i])
        if idx > 96 and idx < 123:
            idx += key
            if idx > 122:
                idx -= 26
        elif idx > 64 and idx < 91:
            idx += key
            if idx > 90:
                idx -= 26
        flag += chr(idx)
    #print(flag)
## find the most possible answer in the printed flag
flag = 'crossingtherubiconljmawiae'
flag = 'picoCTF{' + flag + '}'
print(flag)

# Flags
## use https://www.dcode.fr/maritime-signals-code
flag = 'PICOCTF{F1AG5AND5TUFF}'
print(flag)

# Mr. worldwide
cipher = [(35.028309, 135.753082),(46.469391, 30.740883),(39.758949, -84.191605),(41.015137, 28.979530),(24.466667, 54.366669),(3.140853, 101.693207),'_',(9.005401, 38.763611),(-3.989038, -79.203560),(52.377956, 4.897070),(41.085651, -73.858467),(57.790001, -152.407227),(31.205753, 29.924526)]
## the value in cipher is latitude and longitude
## use google map to find the corresponding city
flag = 'KODIAK_ALASKA'

# Tapping
## use https://www.dcode.fr/code-morse
## cipher = .--. .. -.-. --- -.-. - ..-. { -- ----- .-. ... ...-- -.-. ----- -.. ...-- .---- ... ..-. ..- -. .---- -.... --... --... ..--- ..... --... ..--- ---.. --... }

# la cifra de
## use https://www.guballa.de/vigenere-solver
## flag is at the fourth paragraph 
flag = 'picoCTF{b311a50_0r_v1gn3r3_c1ph3rabef1b3b}'
print(flag)

# rsa-pop-quiz
## problem 1
q = 60413
p = 76753
n = p*q
## problem 2
p = 54269
n = 5051846941
q = n/p
## problem 4
p = 66347
q = 12611
phi = (p-1)*(q-1)
## problem 5
import gmpy2
plaintext = 6357294171489311547190987615544575133581967886499484091352661406414044440475205342882841236357665973431462491355089413710392273380203038793241564304774271529108729717
e = 3
n = 29129463609326322559521123136222078780585451208149138547799121083622333250646678767769126248182207478527881025116332742616201890576280859777513414460842754045651093593251726785499360828237897586278068419875517543013545369871704159718105354690802726645710699029936754265654381929650494383622583174075805797766685192325859982797796060391271817578087472948205626257717479858369754502615173773514087437504532994142632207906501079835037052797306690891600559321673928943158514646572885986881016569647357891598545880304236145548059520898133142087545369179876065657214225826997676844000054327141666320553082128424707948750331
c = (plaintext*plaintext*plaintext) % n
## problem 7
q = 92092076805892533739724722602668675840671093008520241548191914215399824020372076186460768206814914423802230398410980218741906960527104568970225804374404612617736579286959865287226538692911376507934256844456333236362669879347073756238894784951597211105734179388300051579994253565459304743059533646753003894559
p = 97846775312392801037224396977012615848433199640105786119757047098757998273009741128821931277074555731813289423891389911801250326299324018557072727051765547115514791337578758859803890173153277252326496062476389498019821358465433398338364421624871010292162533041884897182597065662521825095949253625730631876637
e = 65537
phi = (p-1)*(q-1)
d = gmpy2.invert(e, phi)
## problem 8
p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
cipher = 11414354166074402755164590556641179510390955987180616313598814488860571850569627408904290135283428920666717612247935936889741174861740224415910111160498656256896678079471373793134970331695671979818719947249086183419374170380011838377712137156655353333603309532154429629316613952073734543526935095731152872812955954824132637944535153824014078120443101933069681669256602347092095050923741698741934906694415931234676691035622479817210233347697548820214251179785631792488566945306938417118918268033241877748155382065658575003275681795893749615704427227208993357057762628133230351866198772974377028377937056546764806501336
e = 65537
n = 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239
q = n//p
phi = (p-1)*(q-1)
d = gmpy2.invert(e, phi)
plaintext = pow(cipher, d, n)
flag = str(hex(plaintext))[2:]
flag = bytearray.fromhex(flag).decode()
print(flag)

# miniRSA
n = 29331922499794985782735976045591164936683059380558950386560160105740343201513369939006307531165922708949619162698623675349030430859547825708994708321803705309459438099340427770580064400911431856656901982789948285309956111848686906152664473350940486507451771223435835260168971210087470894448460745593956840586530527915802541450092946574694809584880896601317519794442862977471129319781313161842056501715040555964011899589002863730868679527184420789010551475067862907739054966183120621407246398518098981106431219207697870293412176440482900183550467375190239898455201170831410460483829448603477361305838743852756938687673
e= 3
cipher = 2205316413931134031074603746928247799030155221252519872649604243394069216326314270624430181767863085854215545736160599718939066687544261205735290002239045830806570632200667142910415788763317978137702614731825117431700919216297401306846053
def small_msg(e, n, c):
    for k in range(200000000):
        if gmpy2.iroot(c + n * k, e)[1]:
            return gmpy2.iroot(c + n * k, 3)[0]
plaintext = small_msg(e, n, cipher)
flag = str(hex(plaintext))[2:]
flag = bytearray.fromhex(flag).decode()
print(flag)

# waves over lambda
## use https://quipqiup.com/
flag = 'frequency_is_c_over_lambda_vlnhnasstm'
flag = 'picoCTF{' + flag + '}'
print(flag)

# b00tl3gRSA2
import ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator
c = 39461752281029198366538188190029092081455054052377589627688734222053581677554520368857091932205365400363192401562289931181473876202818100108039383254416375831338432312350909566407305639626075551618637264668933709387452157434021524994746198455792607755054144309877407142580196642505103395747979907582256555469
n = 70438994248023749784519975543005818849159377597126925632568962578407295518517963086079413295497459940824978044848797063349721000835781554944670425163570613120421294050904436338229264054365948115792325536097144703749385854304826033799889166020300477278107876294029105428198006142478349892651105187009426129807
e = 22877061699027808934853711329979688637019658393805737401608715206393324154472356749427045973948509007743101723981974235827071905988824792056354578323795720541337930449216340275419247871755346012849185600418661139961175882439925325167546867913347265708025525841522098885222907282944932991847951793953043531873
def hack_RSA(e,n):
    frac = ContinuedFractions.rational_to_contfrac(e, n)
    convergents = ContinuedFractions.convergents_from_contfrac(frac)
    for (k,d) in convergents:
        if k!=0 and (e*d-1)%k == 0:
            phi = (e*d-1)//k
            s = n - phi + 1
            discr = s*s - 4*n
            if(discr>=0):
                t = Arithmetic.is_perfect_square(discr)
                if t!=-1 and (s+t)%2==0:
                    return d
d = hack_RSA(e, n)
plaintext = pow(c, d, n)
flag = str(hex(plaintext))[2:]
flag = bytearray.fromhex(flag).decode()
print(flag)

# b00tl3gRSA3
import sympy
c = 30617806222096189676077317376989194832186493125259797325218241417859366415366329797779503120041879448012574907321103215895268844070890936515280334230068010345169107754144343951273473601608137084084980587230291974925819531505141154977461863909580784239683228390470065890539572571963598505542838113740846198111879384959995114186173783244053752875
n = 50759020844330151895341376028412592566984665174276387835026793094637861394941190106404895366974104467861614830416851410848420498713733037232036221086738759750070683807463701277448925470198234377961693423145671567427261544517605601538367507300945830817416086379766976979708388886920803846254391906860652776573218884008379354052231692815558939959
e = 65537
def totient(n):
    factors = sympy.factorint(n)
    phi = 1
    for i,j in factors.items():
        phi *= (pow(i,j) - pow(i,j-1))
    return phi
#phi = totient(n)
phi = 50759020706758066649039295396739949235867855122488982847330403922854294977123265019751973856245694790932969222600018307827852812322316673925330003064005776245109766083623356870582467820189474062702303354251129339812207661300629760604647042164503103638946192815213104798168731669615711473809390409623010265002022927074598267139682404925440000000
d = gmpy2.invert(e, phi)
plaintext = pow(c, d, n)
flag = str(hex(plaintext))[2:]
flag = bytearray.fromhex(flag).decode()
print(flag)
